Operator RawCat : ().
Operator obj : (0).
Operator hom : (0;0;0).
Operator idn : (0;0).
Operator cmp : (0;0;0;0;0;0).

[RawCat] =def= [
  prod(U{i}; Obj.
  prod(fun(Obj; A. fun(Obj; B. U{i})); Hom.
  prod(fun(Obj; A.
    ap(ap(Hom; A); A)); Idn.
  prod(fun(Obj; A. fun(Obj; B. fun(Obj; C.
    fun(ap(ap(Hom; B); C); g.
    fun(ap(ap(Hom; A); B); f.
      ap(ap(Hom; A); C)))))); Cmp.
  unit))))
].

[obj(C)] =def= [spread(C; x.y.x)].
[hom(C;A;B)] =def= [ap(ap(spread(spread(C; x.y.y); x.y.x); A); B)].
[idn(C;A)] =def= [ap(spread(spread(spread(C; x.y.y); x.y.y); x.y.x); A)].
[cmp(C;X;Y;Z;f;g)] =def= [ap(ap(ap(ap(ap(spread(spread(spread(spread(C; x.y.y); x.y.y); x.y.y); x.y.x); X); Y); Z); f); g)].

Tactic rawcat_unfold {
  unfold <RawCat obj hom idn cmp>.
}.

Tactic autoR {
  reduce; *{auto; reduce}.
}.

Theorem RawCat_wf : [member(RawCat; U{i'})] {
  refine <rawcat_unfold>; auto.
}.


Theorem obj_wf : [isect(RawCat; RC. member(obj(RC); U{i}))] {
  refine <rawcat_unfold>; auto.
}.

Theorem hom_wf : [
  isect(RawCat; RC.
  isect(obj(RC); A.
  isect(obj(RC); B.
    member(hom(RC;A;B); U{i}))))
] {
  refine <rawcat_unfold>; refine <autoR>.
}.

Theorem idn_wf : [
  isect(RawCat; RC.
  isect(obj(RC); A.
    member(idn(RC;A); hom(RC;A;A))))
] {
  refine <rawcat_unfold>; refine <autoR>.
}.

Theorem cmp_wf : [
  isect(RawCat; RC.
  isect(obj(RC); X.
  isect(obj(RC); Y.
  isect(obj(RC); Z.
  isect(hom(RC; Y; Z); f.
  isect(hom(RC; X; Y); g.
    member(cmp(RC;X;Y;Z;f;g); hom(RC; X;Z))))))))
] {
  refine <rawcat_unfold>; refine <autoR>.
}.

Operator LeftIdentity : (0).
[LeftIdentity(C)] =def= [isect(obj(C); A. isect(obj(C); B. isect(hom(C;A;B); f. =(cmp(C;A;B;B; idn(C;B); f); f; hom(C;A;B)))))].

Operator RightIdentity : (0).
[RightIdentity(C)] =def= [isect(obj(C); A. isect(obj(C); B. isect(hom(C;A;B); f. =(cmp(C;A;A;B; f; idn(C;A)); f; hom(C;A;B)))))].

Operator CmpAssoc : (0).
[CmpAssoc(C)] =def= [
  isect(obj(C); W.
  isect(obj(C); X.
  isect(obj(C); Y.
  isect(obj(C); Z.
  isect(hom(C;W;X); f.
  isect(hom(C;X;Y); g.
  isect(hom(C;Y;Z); h.
    =(cmp(C;W;X;Z; cmp(C;X;Y;Z; h;g); f);
      cmp(C;W;Y;Z; h; cmp(C;W;X;Y; g;f));
      hom(C;W;Z))
  )))))))
].

Theorem LeftIdentity_wf : [isect(RawCat; RC. member(LeftIdentity(RC); U{i}))] {
  unfold <LeftIdentity>; refine <rawcat_unfold>; refine <autoR>.
}.

Theorem RightIdentity_wf : [isect(RawCat; RC. member(RightIdentity(RC); U{i}))] {
  unfold <RightIdentity>; refine <rawcat_unfold>; refine <autoR>.
}.

Theorem CmpAssoc_wf : [isect(RawCat; RC. member(CmpAssoc(RC); U{i}))] {
  unfold <CmpAssoc>; *{refine <rawcat_unfold>; refine <autoR>}.
}.

Operator LawCat : (0).
[LawCat(RC)] =def= [prod(LeftIdentity(RC); _. prod(RightIdentity(RC); _. CmpAssoc(RC)))].

Tactic lawcat_unfold {
  unfold <LeftIdentity RightIdentity CmpAssoc LawCat>;
  refine <rawcat_unfold>.
}.

Theorem LawCat_wf : [isect(RawCat; RC. member(LawCat(RC); U{i}))] {
  intro @i';
  [ *{refine <lawcat_unfold>; refine <autoR>}
  , lemma <RawCat_wf>
  ]
}.

Operator Cat : ().
[Cat] =def= [subset(RawCat; C. LawCat(C))].

Tactic cat_unfold {
  unfold <Cat>; refine <lawcat_unfold>.
}.

Theorem Cat-wf : [member(Cat; U{i'})] {
  *{refine <cat_unfold>; auto};
  elim #1; refine <autoR>
}.

Theorem InitialRawCat : [RawCat] {
  unfold <RawCat>;
  intro [void]; auto;
  intro [lam(A. lam(B. void))]; auto;
  witness [pair(lam(A. <>); pair(lam(A. <>); <>))]; auto.
}.

Theorem InitialCat : [Cat] {
  unfold <Cat>;
  intro [InitialRawCat] @i;
  unfold <InitialRawCat>;
  [id, id, cut-lemma <LawCat_wf>; elim #2 [C]];
  *{refine <lawcat_unfold>; auto; reduce}
}.

Theorem TerminalRawCat : [RawCat] {
  unfold <RawCat>;
  intro [unit]; refine <autoR>;
  intro [lam(A. lam(B. unit))]; refine <autoR>;
}.

Theorem TerminalCat : [Cat] {
  unfold <Cat>;
  intro [TerminalRawCat] <C> @i; unfold <TerminalRawCat>;
  *{refine <lawcat_unfold>; auto; reduce};
  elim #3; auto
}.
