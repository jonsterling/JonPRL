Infix 20 "∈" := member.
Postfix 20 "⇓" := has-value.

Theorem has-value-wf : [{M:base} M ⇓ ∈ U{i}] {
  unfold <has-value>; auto
}.

Resource wf += { wf-lemma <has-value-wf> }.

Operator nat-decode : (0).
[nat-decode(x)] =def= [
  match x {
      "ze" => void
    | "su" => unit
    | _ => bot
  }
].

Operator nat-code : ().
[nat-code] =def= [{a : atom | nat-decode(a) ⇓}].

Operator nat-sig : ().
[nat-sig] =def= [x : nat-code ◃ nat-decode(x)].

Theorem nat-code-wf : [nat-code ∈ U{i}] {
  unfold <nat-code has-value>; auto
}.

Resource wf += { wf-lemma <nat-code-wf> }.

Theorem nat-decode-wf : [{a:nat-code} nat-decode(a) ∈ U{i}] {
  intro @i; auto;
  unfold <nat-decode nat-code>; auto;
  elim #1;
  unfold <nat-decode>;
  assert [bot ⇓];
  aux { chyp-subst <- #4; auto };
  bot-div #6
}.

Resource wf += { wf-lemma <nat-decode-wf> }.

Theorem nat-sig-wf : [nat-sig ∈ container{i}] {
  unfold <nat-sig nat-code nat-decode has-value>; auto;
  elim #1;
  assert [bot ⇓];
  aux {chyp-subst <- #4 [h. h ⇓]; auto;};
  bot-div #6
}.

Resource wf += { wf-lemma <nat-sig-wf> }.

Operator nat' : ().
[nat'] =def= [wtree(nat-sig)].

Theorem nat'-wf : [nat' ∈ U{i}] {
  unfold <nat'>; auto
}.

Resource wf += { wf-lemma <nat'-wf> }.

Theorem ze-code-wf : ["ze" ∈ nat-code] {
  unfold <nat-code has-value nat-decode>;
  auto; reduce; auto ; auto
}.

Theorem su-code-wf : ["su" ∈ nat-code] {
  unfold <nat-code has-value nat-decode>;
  auto; reduce; auto ; auto
}.

Resource wf += { wf-lemma <ze-code-wf> }.
Resource wf += { wf-lemma <su-code-wf> }.


Operator ze : ().
[ze] =def= [sup("ze" ^ <>)].

Operator su : (0).
[su(N)] =def= [sup("su" ^ N)].

Theorem ze-wf : [ze ∈ nat'] {
  unfold <ze nat' nat-sig>; auto; reduce; auto;
  unfold <nat-decode>; reduce; auto
}.

Resource wf += { wf-lemma <ze-wf> }.

Theorem su-wf : [{N:nat'} su(N) ∈ nat'] {
  intro @i; auto;
  unfold <su nat'>;
  auto; reduce; auto; auto;
  unfold <nat-sig>; reduce; auto
}.

Resource wf += { wf-lemma <su-wf> }.

Theorem nat'-elim-test : [nat' -> atom] {
  intro @i; auto;
  unfold <nat'>;
  elim #1; unfold <nat-sig>; reduce;
  witness [a];
  unfold <nat-code>; auto
}.
