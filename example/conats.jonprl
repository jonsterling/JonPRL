Operator top : ().
[top] =def= [void => void].

Theorem top-is-top :
  [{x:base} {y:base} =(x; y; top)] {
  unfold <top>; auto
}.

Operator corec : (1).
[corec(x.F[x])] =def= [{n:nat} natrec(n; top; _.x. F[x])].

Operator conatF : (0).
[conatF(X)] =def= [unit + X].

(* conats are the greatest fixed point of the polynomial functor X + 1 *)
Operator conat : ().
[conat] =def= [corec(R. conatF(R))].

Operator czero : ().
[czero] =def= [inl(<>)].

Operator csucc : (0).
[csucc(M)] =def= [inr(M)].

Operator Y : (1).
[Y(z.f[z])] =def= [lam(x.f[x x]) lam(x.f [(x x)])].

Operator omega : ().
[omega] =def= [Y(x.csucc(x))].

Tactic unfolds {
  *{unfold <corec conat czero csucc conatF top omega Y>}
}.

Tactic instantiate-hyp {
  @{ [H : P => Q, H' : P |- _] => elim <H> [H']}
}.

Tactic refl-from-trans {
  @{ [H : =(y; x; P) |- =(x;x; P)] => hyp-subst <- <H> [h.=(h;h;_)]};
}.

Tactic conat-wf-overture {
  unfolds; auto;
  @{ [n:nat |- _] => elim <n>; thin <n>};
  reduce 1; auto
}.

Theorem zero-wf : [member(czero; conat)] {
  conat-wf-overture
}.

Theorem succ-wf : [{x:conat} member(csucc(x); conat)] {
  conat-wf-overture;
  instantiate-hyp; auto;
  refl-from-trans; auto
}.

Theorem omega-wf : [member(omega; conat)] {
  conat-wf-overture;
  csubst [ceq(lam(x.inr(x x)) lam(x.inr(x x));
              inr(lam(x.inr(x x))  lam(x.inr(x x))))]
         [h.=(h;h;_)];
  [step, reduce 1]; auto
}.
