Operator top : ().
[top] =def= [void => void].

Theorem top-is-top :
  [{x:base} {y:base} =(x; y; top)] {
  unfold <top>; auto
}.

Operator corec : (1).
[corec(F)] =def= [{n:nat} natrec(n; top; _.x. F[x])].

Operator conatF : (0).
[conatF(X)] =def= [+(unit; X)].

(* conats are the greatest fixed point of the polynomial functor X + 1 *)
Operator conat : ().
[conat] =def= [corec(R. conatF(R))].

Operator czero : ().
[czero] =def= [inl(<>)].

Operator csucc : (0).
[csucc(M)] =def= [inr(M)].

Operator Y : (1).
[Y(f)] =def= [lam(x.f[x x]) lam(x.f [(x x)])].

Operator omega : ().
[omega] =def= [Y(x.csucc(x))].

Tactic unfolds {
  *{unfold <corec conat czero csucc conatF top omega Y>}
}.

Tactic rauto {
  *{reduce; auto} ||| May not terminate but shh
}.

Theorem zero-wf : [member(czero; conat)] {
  unfolds; rauto; elim #1; rauto
}.

Theorem succ-wf : [{x:conat} member(csucc(x); conat)] {
  unfolds; auto;
  elim #2; focus 1 #{elim #1 [n']};
  rauto;
  hyp-subst ← #6 [h.=(h; h; natrec(n'; void => void; _.x.+(unit;x)))];
  rauto
}.

Theorem omega-wf : [member(omega; conat)] {
  unfolds; unfold <omega Y>; auto; elim #1;
  focus 0 #{reduce 1; auto};
  csubst [ceq(lam(x.inr(x x)) lam(x.inr(x x));
              inr(lam(x.inr(x x))  lam(x.inr(x x))))]
         [h.=(h;h; natrec(succ(n'); void => void; _.x.+(unit; x)))];
  [step, reduce 1]; auto
}.
