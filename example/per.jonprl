Operator per-squash : (0).
[per-squash(A)] =def= [per(_._.A)].

Theorem per-squash-wf : [{A:U{i}} member(per-squash(A); U{i})] {
  unfold <per-squash>; auto; reduce; auto
}.

Theorem iff_squash : [{A:U{i}} iff(per-squash(A);squash(A))] {
 auto;
 [ unfold <per-squash>;auto;reduce;auto;
   assert [=(x;x;per(_._.A))] <e>;[ auto; fail, id ];
   elim <e>; reduce; [ id, auto; reduce; auto ];
   witness [<>];auto;
   unhide <y>;
   csubst [ceq(<>;lam(_.<>)y)] [h.=(h;h;_)];[ reduce; auto, id ];
   auto;fail
 , id
 , unfold <squash>;auto;fail
 ];
 unfold <squash>;elim <x>;witness [<>];
 unfold <member>;unhide <w>;auto;reduce;auto
}.

Theorem quotient_wf: [
  {T:U{i}}
  {R:rel(T)}
  is-symmetric(T;R)
  -> is-transitive(T;R)
  -> member(quotient(T;x.y.R x y);U{i})
] {
  auto;
  unfold <is-symmetric is-transitive>;
  auto;
  unfold <quotient and>;eq-cd;
  [ unfold <member>; eq-cd;
    [ eq-base-tac;eq-cd;auto;reduce;auto;elim <x'''>;reduce;auto;fail
    , eq-cd;
      [ eq-base-tac;eq-cd;auto;reduce;auto;elim <x''''>;reduce;auto;fail
      , auto;fail
      ]
    ]
  , unfold <member>; eq-cd;
    [ eq-base-tac;eq-cd;auto;reduce;auto;elim <x'''>;reduce;auto;fail
    , eq-cd;
      [ eq-base-tac;eq-cd;auto;reduce;auto;elim <x''''>;reduce;auto;fail
      , auto;fail
      ]
    ]
  , auto
  , auto
  , elim <z>; elim <t>;auto;
    elim #3 [x''];auto;
    elim #12 [y];auto;
    elim #14 [t'];auto;
    fail
  , elim <u>; elim <v>; elim <t>; elim <t'>;auto;
    elim #4 [x''];auto;
    elim #18 [y];auto;
    elim #20 [z];auto;
    elim #22 [t''];auto;
    elim #24 [t'''];auto ]
}.
