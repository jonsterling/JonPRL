Operator MonoidSig : ().
Operator car : (0).
Operator ze : (0).
Operator op : (0;0;0).

Operator MonoidLaws : (0).
Operator LeftUnit : (0).
Operator RightUnit : (0).
Operator Assoc : (0).

Operator Monoid : ().

[MonoidSig] =def= [prod(U{i}; A. prod(A; zero. fun(A; m. fun(A; n. A))))].
[car(M)] =def= [spread(M; x.y.x)].
[ze(M)] =def= [spread(spread(M; x.y.y); x.y.x)].
[op(M;X;Y)] =def= [ap(ap(spread(spread(M; x.y.y); x.y.y);X);Y)].
[LeftUnit(M)] =def= [isect(car(M); m. =(m; op(M; ze(M); m); car(M)))].
[RightUnit(M)] =def= [isect(car(M); m. =(op(M; ze(M); m); m; car(M)))].
[Assoc(M)] =def= [isect(car(M); x. isect(car(M); y. isect(car(M); z. =(op(M;op(M;x;y);z); op(M;x;op(M;y;z));car(M)))))].

[MonoidLaws(M)] =def= [prod(LeftUnit(M); _. prod(RightUnit(M); _. Assoc(M)))].
[Monoid] =def= [subset(MonoidSig; M. MonoidLaws(M))].

Tactic monoid-sig-unfold {
  unfold <MonoidSig car op ze>
}.

Theorem MonoidSig-wf : [member(MonoidSig; U{i'})] {
  refine <monoid-sig-unfold>; auto.
}.

Theorem car-wf : [isect(MonoidSig; M. member(car(M); U{i}))] {
  refine <monoid-sig-unfold>; auto.
}.

Tactic monoid-laws-unfold {
  unfold <MonoidLaws LeftUnit RightUnit Assoc>
}.

Tactic monoid-unfold {
  unfold <Monoid>; refine <monoid-sig-unfold>; refine <monoid-laws-unfold>.
}.

Tactic monoid-simplify {
  *{ refine <monoid-unfold>; reduce; auto }.
}.

Theorem LeftUnit-wf : [isect(MonoidSig; M. member(LeftUnit(M); U{i}))] {
  refine <monoid-simplify>.
}.

Theorem RightUnit-wf : [isect(MonoidSig; M. member(RightUnit(M);U{i}))] {
  refine <monoid-simplify>.
}.

Theorem Assoc-wf : [isect(MonoidSig; M. member(Assoc(M); U{i}))] {
  refine <monoid-simplify>.
}.

Theorem MonoidLaws-wf : [isect(MonoidSig; M. member(MonoidLaws(M); U{i}))] {
  refine <monoid-simplify>.
}.

Theorem Monoid-wf : [member(Monoid; U{i'})] {
  refine <monoid-simplify>.
}.

Theorem UnitMonoidStruct : [MonoidSig] {
  unfold <MonoidSig>;
  intro [unit]; auto;
  intro [<>] ; auto.
}.

Theorem UnitMonoid : [Monoid] {
  unfold <Monoid>;
  intro [UnitMonoidStruct] @i; unfold <UnitMonoidStruct>;
  refine <monoid-simplify>;
  elim #1; auto.
}.

Theorem UnitMonoid-LeftUnit : [LeftUnit(UnitMonoidStruct)] {
  unfold <UnitMonoidStruct>;
  refine <monoid-simplify>; elim #1; auto.
}.

Theorem UnitMonoid-RightUnit : [RightUnit(UnitMonoidStruct)] {
  unfold <UnitMonoidStruct>;
  refine <monoid-simplify>; elim #1; auto.
}.
