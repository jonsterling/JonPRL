Operator MonoidSig : ().
Operator car : (0).
Operator ze : (0).
Operator op : (0;0;0).

Operator MonoidLaws : (0).
Operator LeftUnit : (0).
Operator RightUnit : (0).
Operator Assoc : (0).

Operator Monoid : ().

[MonoidSig] =def= [(A:U{i}) * A * (A -> A -> A)].
[car(M)] =def= [spread(M; x.y.x)].
[ze(M)] =def= [spread(spread(M; x.y.y); x.y.x)].
[op(M;X;Y)] =def= [spread(spread(M; x.y.y); x.y.y) X Y].
[LeftUnit(M)] =def= [{m:car(M)} =(m; op(M; ze(M); m); car(M))].
[RightUnit(M)] =def= [{m:car(M)} =(op(M; ze(M); m); m; car(M))].
[Assoc(M)] =def= [{x:car(M)} {y:car(M)} {z:car(M)} =(op(M;op(M;x;y);z); op(M;x;op(M;y;z));car(M))].

[MonoidLaws(M)] =def= [LeftUnit(M) * RightUnit(M) * Assoc(M)].
[Monoid] =def= [{M : MonoidSig | MonoidLaws(M)}].

Tactic monoid-sig-unfold {
  unfold <MonoidSig car op ze>
}.

Theorem MonoidSig-wf : [member(MonoidSig; U{i'})] {
  monoid-sig-unfold; auto.
}.

Resource wf += { wf-lemma <MonoidSig-wf> }.

Theorem car-wf : [{M:MonoidSig} member(car(M); U{i})] {
  intro @i'; auto;
  unfold <MonoidSig car>; auto
}.

Resource wf += { wf-lemma <car-wf> }.

Theorem ze-wf : [{M:MonoidSig} member(ze(M); car(M))] {
  intro @i'; auto;
  unfold <MonoidSig ze car>;
  auto; reduce; auto
}.

Resource wf += { wf-lemma <ze-wf> }.

Theorem op-wf : [{M:MonoidSig} {X:car(M)} {Y:car(M)} member(op(M; X; Y); car(M))] {
  intro @i'; auto; *{ intro @i; auto };
  unfold <MonoidSig car op>;
  auto; reduce; auto
}.

Resource wf += { wf-lemma <op-wf> }.

Theorem LeftUnit-wf : [{M:MonoidSig} member(LeftUnit(M); U{i})] {
  intro @i'; auto;
  unfold <LeftUnit>;
  auto
}.

Theorem RightUnit-wf : [{M:MonoidSig} member(RightUnit(M);U{i})] {
  intro @i'; auto;
  unfold <RightUnit>; auto
}.

Theorem Assoc-wf : [{M:MonoidSig} member(Assoc(M); U{i})] {
  intro @i'; auto;
  unfold <Assoc>; auto
}.

Resource wf += { wf-lemma <LeftUnit-wf> }.
Resource wf += { wf-lemma <RightUnit-wf> }.
Resource wf += { wf-lemma <Assoc-wf> }.

Theorem MonoidLaws-wf : [{M:MonoidSig} member(MonoidLaws(M); U{i})] {
  intro @i'; auto;
  unfold <MonoidLaws>; auto
}.

Resource wf += { wf-lemma <MonoidLaws-wf> }.

Theorem Monoid-wf : [member(Monoid; U{i'})] {
  unfold <Monoid>; auto; cum @i; auto
}.

Theorem UnitMonoidStruct : [MonoidSig] {
  unfold <MonoidSig>;
  intro [unit]; auto
}.


Tactic monoid-laws-unfold {
  unfold <MonoidLaws LeftUnit RightUnit Assoc>
}.

Tactic monoid-unfold {
  unfold <Monoid>; monoid-sig-unfold; monoid-laws-unfold.
}.

Tactic monoid-simplify {
  *{ monoid-unfold; reduce; auto }.
}.


Theorem UnitMonoid : [Monoid] {
  unfold <Monoid>;
  intro [UnitMonoidStruct] @i; unfold <UnitMonoidStruct>;
  monoid-simplify; auto
}.

Theorem UnitMonoid-LeftUnit : [LeftUnit(UnitMonoidStruct)] {
  unfold <UnitMonoidStruct>;
  monoid-simplify; auto
}.

Theorem UnitMonoid-RightUnit : [RightUnit(UnitMonoidStruct)] {
  unfold <UnitMonoidStruct>;
  monoid-simplify; auto
}.
