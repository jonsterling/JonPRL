Operator Y : (0).
[Y(f)] =def= [ap(lam(x.ap(f;ap(x;x)));lam(x.ap(f;ap(x;x))))].

Theorem test : [ceq(lam(x.x); lam(x.x))] {
  auto
}.

Theorem test2 : [ceq(spread(lam(x.x); x.y.x); spread(lam(x.x); x.y.y))] {
  auto
}.

Theorem test3 : [ceq(lam(x.x); lam(x.spread(pair(x;x); x._.x)))] {
  auto; csymmetry; step; auto
}.

Theorem y-is-fix-point : [
  isect(U{i}; A. isect(fun(A; _.A); f . ceq(Y(f); ap(f; Y(f)))))
] {
  auto; unfold <Y>; step; auto
}.

Theorem transitive : [
  isect(base; a.
  isect(base; b.
  isect(base; c.
  isect(=(a; b; base); _.
  isect(=(b; c; base); _.
  =(a; c; base))))))
] {
  auto;
  elim #4;
  elim #5;
  chyp-subst → #6 [h. ceq(h;c)];
  chyp-subst ← #7 [h. ceq(b;h)];
  auto
}.

Operator complex : (1; 1; 2; 0; 1).

Theorem complex-ceq : [
  ceq(complex(x.x; x.unit; x.y.y; <>; x.<>);
      complex(x.spread(pair(x;x); x._.x); x.unit; x.y.y; <>; x.<>))
] {
  auto; reduce; auto
}.
