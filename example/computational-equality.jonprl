Infix 7 "~" := ceq.

Theorem test : [lam(x.x) ~ lam(x.x)] {
  auto
}.

Theorem test2 : [spread(lam(x.x); x.y.x) ~ spread(lam(x.x); x.y.y)] {
  auto
}.

Theorem test3 : [lam(x.x) ~ lam(x.spread(<x,x>; x._.x))] {
  auto; csymmetry; step; auto
}.

Theorem computational-eta : [{A:U{i}} {g : A -> A} g ~ lam(x. g x)] {
  auto;
  assert [=(g; lam(x.g x); A -> A)];
  aux { ext; auto; reduce; auto };
  hyp-subst -> #3 [h. h ~ _]; auto
}.

Tactic computational-eta-tac {
  @{ [f : A -> A |- ceq(f; lam(x. f x))] =>
       cut-lemma <computational-eta>;
       elim <computational-eta> [A]; auto;
       @{ [H : {g : A -> A} g ~ lam(x. g x) |- _] =>
            elim <H> [f]; auto
        }
   }
}.

Theorem fix-is-fix-point : [{A:U{i}} {f : A -> A} fix(f) ~ f fix(f)] {
  auto;
  csubst [f ~ lam(x.f x)] [h. fix(h) ~ _];
  aux {computational-eta-tac};

  step;
  csubst [lam(x.f x) ~ f] [h. h fix(h) ~ _];
  aux {csymmetry; computational-eta-tac};
  auto
}.

Theorem transitive : [
  {a:base} {b:base} {c:base}
    =(a;b;base)
    => =(b;c;base)
    => =(a;b;base)
] {
  auto;
  elim #4;
  elim #5;
  chyp-subst → #6 [h. h ~ c];
  chyp-subst ← #7 [h. b ~ h];
  auto
}.

Operator complex : (1; 1; 2; 0; 1).

Theorem complex-ceq : [
  complex(x.x; x.unit; x.y.y; <>; x.<>)
    ~ complex(x.spread(<x,x>; x._.x); x.unit; x.y.y; <>; x.<>)
] {
  auto; reduce; auto
}.
