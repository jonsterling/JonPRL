Operator Fn : (0;0).
[Fn(A;B)] =def= [fun(A; _. B)].

Operator Prod : (0;0).
[Prod(A;B)] =def= [prod(A; _. B)].

Operator fst : (0).
Operator snd : (0).

[fst(p)] =def= [spread(p; x.y.x)].
[snd(p)] =def= [spread(p; x.y.y)].

Operator RawCat : ().

[RawCat] =def= [
  prod(U{i}; Obj.
  prod(U{i}; Arr.
  prod(Fn(Arr;Obj); Src.
  prod(Fn(Arr;Obj); Trg.
  prod(fun(Obj; X. subset(Arr; f. Prod(=(ap(Src;f);X;Obj); =(ap(Trg;f);X;Obj)))); Idn.
  fun(Arr; f. fun(subset(Arr; g. =(ap(Src;g);ap(Trg;f);Obj)); g. subset(Arr; fg. =(ap(Src;fg);ap(Trg;g);Obj))))
)))))
].

Operator obj : (0).
Operator arr : (0).
Operator src : (0;0).
Operator trg : (0;0).
Operator hom : (0;0;0).
Operator idn : (0;0).
Operator seq : (0;0;0).

[obj(C)] =def= [fst(C)].
[arr(C)] =def= [fst(snd(C))].
[src(C;f)] =def= [ap(fst(snd(snd(C))); f)].
[trg(C;f)] =def= [ap(fst(snd(snd(snd(C)))); f)].
[hom(C;X;Y)] =def= [subset(arr(C); f. Prod(=(X;src(C;f);obj(C)); =(Y;trg(C;f);obj(C))))].
[idn(C;X)] =def= [ap(fst(snd(snd(snd(snd(C))))); X)].
[seq(C;f;g)] =def= [ap(ap(snd(snd(snd(snd(snd(C))))); f); g)].

Tactic rawcat-unfold {
  *{unfold <RawCat Fn Prod obj arr src trg hom idn seq fst snd>}
}.

Theorem obj-wf : [isect(RawCat; C. member(obj(C); U{i}))] {
  refine <rawcat-unfold>; auto
}.

Theorem arr-wf : [isect(RawCat; C. member(arr(C); U{i}))] {
  refine <rawcat-unfold>; auto
}.

Theorem src-wf : [isect(RawCat; C. isect(arr(C); f. member(src(C;f); obj(C))))] {
  refine <rawcat-unfold>; auto
}.

Theorem trg-wf : [isect(RawCat; C. isect(arr(C); f. member(trg(C;f); obj(C))))] {
  refine <rawcat-unfold>; auto
}.

Theorem hom-wf : [isect(RawCat; C. isect(obj(C); X. isect(obj(C); Y. member(hom(C;X;Y); U{i}))))] {
  refine <rawcat-unfold>; auto
}.

Theorem RawCat-wf : [member(RawCat; U{i'})] {
  refine <rawcat-unfold>; auto;
}.

Theorem InitialRawCat : [RawCat] {
  refine <rawcat-unfold>;
  intro [void]; auto;
  intro [void]; auto;
  *{intro [lam(x.welp)]; auto}.
}.
