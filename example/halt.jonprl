Infix 2 "∈" := member.
Prefix 10 "¬" := not.
Postfix 11 "⇓" := has-value.
Infix 10 "≼" := approx.
Infix 10 "~" := ceq.

||| The proof of the undecidability of the halting problem here is pretty much
||| what you would expect, we apply the standard diagonalization trick to prove
||| that if we have a halting oracle there is a program which both does and
||| doesn't terminate.

Operator dec : (0).
Postfix 2 "decidable" := dec.
[P decidable] =def= [P + ¬ P].

Theorem has-value-wf : [{A : base} A ⇓ ∈ U{i}] {
  unfold <has-value>; auto
}.

Theorem dec-wf : [{A : U{i}} A decidable ∈ U{i}] {
  unfold <dec not implies>; auto
}.

Resource wf += {wf-lemma <dec-wf>}.
Resource wf += {wf-lemma <has-value-wf>}.

Operator problem : (0).
[problem(M)] =def= [lam(y. decide(M (y y); _. bot; _. <>))].

Tactic contradiction {
  unfold <not implies void>;
  @{ [H : P -> <> ≼ bot, H' : P |- <> ≼ bot] =>
       elim <H> [H'];
       unfold <member>;
       auto
   }
}.

||| This is just used in assert-opposite to deal with
||| the main proof obligations.
Tactic t {
  unfold <problem>;
  step;
  @{ [H : =(_; h; _) |- decide(h; _._; _._) ~ _] =>
     hyp-subst ← <H> [h. decide(h; _._; _._) ~ _]
   };
  auto; step; auto
}.

||| If problem(x) problem(x) halts, prove that it is bot,
||| if it diverges, prove it's ax.
Tactic assert-opposite {
  @{ [_ : M ⇓ |- _] =>
     assert [M ~ bot]; aux {t}
   | [_ : M ⇓ -> <> ≼ bot |- _] =>
     assert [M ~ <>]; aux {t}
   }
}.

||| Given a hypothesis M ~ bot or M ~ <>, convert this into a hypothesis that ¬
||| M ⇓ or M ⇓.
Tactic derive-contra {
  @{ [H : M ~ bot |- _] =>
     assert [¬ M ⇓];
     aux {
       chyp-subst → <H> [h. ¬ h ⇓];
       auto; bot-div #6
     };
   | [H : M ~ <> |- _] =>
     assert [M ⇓];
     aux {
       chyp-subst → <H> [h. h ⇓];
       auto; reduce; auto
     };
   }
}.

Theorem halting-problem-undecidable : [¬ ((m : base) m ⇓ decidable)] {
  *{unfold <not implies dec>}; auto;

  ||| Ask whether or not problem(x) problem(x) terminates
  elim #1 [problem(x) problem(x)]; auto; elim #2;

  ||| Show no matter the answer, we have a contradiction.
  assert-opposite; derive-contra; contradiction
}.

||| We can now demonstrate that the global principle of the excluded middle is
||| invalid.
Theorem excluded-middle-invalid : [¬ ((A : U{i}) A decidable)] {
  unfold <dec>; auto;

  ||| With our hypothesis, we can solve the halting problem
  assert [(m : base) m ⇓ + ¬ m ⇓];
  aux {
    auto; elim #1 [m ⇓]; auto; unfold <not implies void>;
    assumption
  };

  ||| But we still can't solve the halting problem, contradiction.
  cut-lemma <halting-problem-undecidable>; unfold <not implies dec>;
  contradiction
}.
