||| The proof of the undecidability of the halting problem here is pretty much
||| what you would expect; we apply the standard diagonalization trick to prove
||| that if we have a halting oracle there is a program which both does and
||| doesn't terminate.

Operator problem : (0).
[problem(M)] =def= [lam(y. decide(M (y y); _. bot; _. <>))].

||| This is just used in assert-opposite to deal with
||| the main proof obligations.
Tactic assert-opposite-aux {
  unfold <problem>;
  step;
  @{ [H : _ ~ h |- decide(h; _._; _._) ~ _] =>
     chyp-subst <- <H>
   };
  auto; step; auto
}.

||| If problem(x) problem(x) halts, prove that it is bot,
||| if it diverges, prove it's ax.
Tactic assert-opposite {
  @{ [_ : M ⇓ |- _] =>
     assert [M ~ bot]
   | [_ : ¬ (M ⇓) |- _] =>
     assert [M ~ <>]
   }; aux { assert-opposite-aux }
}.

||| Given a hypothesis M ~ bot or M ~ <>, convert this into a hypothesis that ¬ M ⇓ or M ⇓.
Tactic derive-halting-statement {
  @{ [H : M ~ bot |- _] =>
     assert [¬ M ⇓];
     aux {
       chyp-subst → <H>;
       unfold <not implies>;
       intro <bot-has-value> @i; aux { auto };
       bot-div <bot-has-value>
     };
   | [H : M ~ <> |- _] =>
     assert [M ⇓];
     aux {
       chyp-subst → <H>;
       auto; reduce; auto
     };
   }
}.

Theorem halting-problem-undecidable : [¬ ((m : base) m ⇓ decidable)] {
  unfold <not implies>;
  intro <Ὁ-ΘΕΌΣ> @i; aux { auto };

  ||| Approach the temple and address the god's earthly representative, the oracle
  pointwise-functionality <Ὁ-ΘΕΌΣ> <oracle, _, oracle-wf>; aux { auto };

  ||| Make a whole burnt offering, and ask the oracle concerning itself
  assert [{y : (problem(oracle) problem(oracle)) ⇓ decidable | y ~ oracle (problem(oracle) problem(oracle))}] <H>;
  aux {
    intro [oracle (problem(oracle) problem(oracle))] @i;
    unfold <member>; auto;
    eq-cd [(m:base) m ⇓ decidable]; auto;
  };

  elim <H> <prophecy, prophecy-ceq>;

  ||| Ask whether or not problem(oracle) problem(oracle) terminates
  unfold <dec>; elim <prophecy>;

  ||| Show no matter the answer, we have a contradiction.
  assert-opposite; derive-halting-statement; contradiction
}.
