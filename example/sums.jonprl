Operator equiv : (0; 0).
[equiv(A; B)] =def= [(A -> B) * (B -> A)].

||| Try the first introduction rule and if we can't
||| immediately solve the goal backtrack and try the
||| next.
Tactic constructor {
   (!{intro #0; auto} | !{intro #1; auto})
}.

Theorem commutative : [{A:U{i}} {B:U{i}} equiv(+(A; B); +(B; A))] {
  unfold <equiv>; auto; elim #3; constructor
}.

Theorem plus-assoc : [{A:U{i}} {B:U{i}} {C:U{i}} equiv(+(A; +(B; C)); +(+(A; B); C))] {
  unfold <equiv>; auto; elim #4;
  [id; id, elim #5, elim #5, intro #1; intro #1];
  auto;
  [intro #0, intro #0, id, id, intro #1];
  constructor
}.

Theorem void-idr : [{A:U{i}} equiv(+(A; void); A)] {
  unfold <equiv>; auto; [elim #2, intro #0]; auto.
}.

Theorem void-idl : [{A:U{i}} equiv(+(void; A); A)] {
  unfold <equiv>; auto; [elim #2, intro #1]; auto.
}.
