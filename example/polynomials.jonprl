Operator fst : (0).
Operator snd : (0).

[fst(p)] =def= [spread(p; x.y.x)].
[snd(p)] =def= [spread(p; x.y.y)].

||| Ambient category

Operator CTT : (0;0).
Operator Paths : (0;0;0).

[CTT(A;B)] =def= [A -> B].
[Paths(A;x;y)] =def= [=(x;y;A)].

||| Power / Copower

Operator Power : (0;0).
Operator Copower : (0;0).

[Power(A;B)] =def= [A -> B].
[Copower(A;B)] =def= [A * B].

||| End / Coend

Operator End : (0;0).
Operator Coend : (0;0).

[End(U;Hom)] =def= [(A:U) Hom A A].
[Coend(U;Hom)] =def= [(A:U) * Hom A A].

Tactic autoR {
  reduce; *{(intro | eq-cd); reduce}
}.

Theorem End_wf : [
  {U:U{i}} {Hom : U -> U -> U{i}} member(End(U;Hom); U{i})
] {
  unfold <End>; auto.
}.
Theorem Coend_wf : [
  {U:U{i}} {Hom : U -> U -> U{i}} member(Coend(U;Hom); U{i})
] {
  unfold <Coend>; auto.
}.

||| Ran / Lan

Operator Ran : (0;0;0;0;0).
Operator Lan : (0;0;0;0;0).

[Ran(E;B;f;φ;b)] =def= [End(E; lam(X. lam(Y. Power(Paths(B; b; f X); φ Y))))].
[Lan(E;B;f;φ;b)] =def= [Coend(E; lam(X. lam(Y. Copower(Paths(B; f X; b); φ Y))))].

Theorem Ran_wf : [
  {E:U{i}} {B:U{i}} {f : E -> B} {φ : E -> U{i}} {b:B}
    member(Ran(E;B;f;φ;b); U{i})
] {
  unfold <Ran Power End Paths>; autoR.
}.
Theorem Lan_wf : [
  {E:U{i}} {B:U{i}} {f : E -> B} {φ : E -> U{i}} {b:B}
    member(Lan(E;B;f;φ;b); U{i})
] {
  unfold <Lan Copower Coend Paths>; autoR.
}.

||| Fam

Operator Fam : (0).
Operator dom : (0).
Operator map : (0;0).

[Fam(B)] =def= [(Dom:U{i}) * Dom -> B].
[dom(f)] =def= [fst(f)].
[map(f;b)] =def= [snd(f) b].

Theorem Fam_wf : [{B:U{i}} member(Fam(B); U{i'})] {
  unfold <Fam>; auto
}.
Theorem dom_wf : [{B:U{i}} {f:Fam(B)} member(dom(f); U{i})] {
  unfold <Fam map dom fst>; auto
}.
Theorem map_wf : [
  {B:U{i}} {f:Fam(B)} {x:dom(f)} member(map(f;x); B)
] {
  unfold <Fam dom map fst snd>; autoR.
}.

||| Fibers of a bundle over a point

Operator Fiber : (0;0;0).

[Fiber(B; f; b)] =def= [(x : dom(f)) * =(b; map(f; x); B)].

Theorem Fiber_wf : [
  {B:U{i}} {f:Fam(B)} {b:B} member(Fiber(B;f;b); U{i})
] {
  unfold <Fam Fiber dom map fst snd>; autoR.
}.

||| Quantifier adjoints

Operator Exists : (0;0;0).
Operator Invert : (0).
Operator Forall : (0;0;0).

||| Exists ⊣ Invert ⊣ Forall

[Exists(X;Y;f)] =def= [lam(φ. lam(y. Lan(X;Y;f;φ;y)))].
[Invert(f)] =def= [lam(φ. lam(x. φ (f x)))].
[Forall(X;Y;f)] =def= [lam(φ. lam(y. Ran(X;Y;f;φ;y)))].

Theorem Exists_wf : [
  {X:U{i}} {Y:U{i}} {f : X -> Y} {φ : X -> U{i}}
    member(Exists(X;Y;f) φ; Y -> U{i})
] {
  unfold <Exists Lan Coend Copower Paths>; autoR.
}.
Theorem Invert_wf : [
{X:U{i}} {Y:U{i}} {f : X -> Y} {φ : Y -> U{i}}
    member(Invert(f) φ; X -> U{i})
] {
  unfold <Invert>; autoR.
}.
Theorem Forall_wf : [
  {X:U{i}} {Y:U{i}} {f : X -> Y} {φ : X -> U{i}}
    member(Forall(X;Y;f) φ; Y -> U{i})
] {
  unfold <Forall Ran End Power Paths>; autoR
}.

||| Examples

Operator δ : ().
Operator Θ : (0;0).

||| diagonal
[δ] =def= [lam(x.<x, x>)].

||| equality from left adjoint to substitution
[Θ(X;p)] =def= [Exists(X;X*X; δ) lam(_. unit) p].

||| <> = <> member unit
Theorem eq_unit_unit : [Θ(unit; <<>,<>>)] {
  unfold <Θ δ Exists Lan Coend Copower Paths>; autoR;
  intro [<>]; auto.
}.

||| Polynomials (non-indexed)

Operator Polynomial : ().
Operator base-space : (0).
Operator fam : (0).

[Polynomial] =def= [(B:U{i}) * Fam(B)].
[base-space(E)] =def= [fst(E)].
[fam(E)] =def= [snd(E)].

Theorem Polynomial_wf : [member(Polynomial; U{i'})] {
  unfold <Polynomial Fam>; auto
}.

||| Yoneda embedding

Operator Embed : (0).

[Embed(B)] =def= [lam(A. CTT(A;B))].

Theorem Embed_wf : [
  {B:U{i}} {X:U{i}} member(Embed(B) X; U{i})
] {
  unfold <Embed CTT>; autoR
}.

||| Extension functors of polynomials

Operator Ext : (0;0).

[Ext(p;X)] =def= [base-space(p) * unit].

Theorem Ext_wf : [
  {p:Polynomial} {X:U{i}} member(Ext(p;X); U{i'})
] {
  unfold <Polynomial Ext Fam base-space Embed CTT Fiber fam dom map fst snd>; auto
}.

||| Fam pullbacks

Operator Pullback : (0;0;0).

[Pullback(B;f;g)] =def= [(x : dom(f)) * Fiber(B; g; map(f;x))].

Theorem Pullback_wf : [
  {B:U{i}} {f:Fam(B)} {g:Fam(B)} member(Pullback(B;f;g); U{i})
] {
  unfold <Pullback Fam Fiber map dom fst snd>; autoR.
}.
