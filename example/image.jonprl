Theorem squash_wf : [ isect(U{i};t.member(squash(t);U{i})) ] {
  [ *{unfold <squash>;auto;auto}
  intro @i';
  , auto]
}.

Theorem implies_squash : [ isect(U{i};t.t -> squash(t)) ] {
  auto
  intro @i';[ id, auto ];
  intro @i;[ id, auto ];
  witness [ap(lam(_.<>);_)];
  unfold <squash member>;
}.

Theorem approx_id_refl_wf : [
  =(approx(lam(x.x);lam(x.x));approx(<>;<>);U{i})
] {
  unfold <member>;
  approx-ext-eq;
  cut-lemma <implies_squash>;
  elim #1 [iff(approx(lam(x.x); lam(x.x)); approx(<>; <>))];
  [ unfold <iff and implies>; auto
  , id ];[id];
  assert [iff(approx(lam(x.x); lam(x.x)); approx(<>; <>))];
  [ id
  , elim #2 [H];auto];[id];
  unfold <iff and implies>; intro; intro; auto
}.
