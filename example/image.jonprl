Theorem squash_wf : [ isect(U{i};t.member(squash(t);U{i})) ] {
  unfold <squash>; auto
}.

Theorem implies_squash : [ {T:U{i}} T => squash(T) ] {
  *{intro; focus 1 #{auto}};
  @{ [H: 'T |- _] => witness [lam(_.<>) H]};
  unfold <squash>; auto
}.

Theorem approx_id_refl_wf : [
  =(approx(lam(x.x);lam(x.x));approx(<>;<>);U{i})
] {
  unfold <member>; ext;
  cut-lemma <implies_squash>;
  elim #1 [iff(approx(lam(x.x); lam(x.x)); approx(<>; <>))];
  focus 0 #{ unfold <iff and implies>; auto };
  assert [iff(approx(lam(x.x); lam(x.x)); approx(<>; <>))];
  focus 1 #{elim #2 [H]; auto};
  unfold <iff and implies>; intro; intro; auto
}.

Theorem test_image_elim : [
  {n:nat} {m:nat} {x:squash(=(n; m; nat))} member(x; squash(=(n; m; nat))) => =(n; m; nat)
] {
  unfold <squash member>;
  *{intro; focus 1 #{auto}};
  @{[H : image(_;_) |- _] => elim <H>};
  auto
}.
