Theorem natp-example : [nat] {
  witness [succ(zero)]; auto
}.

Theorem minus-one : [fun(nat; _. nat)] {
  intro <n>; [id, auto];
  elim #1;
  [ witness [zero]
  , hypothesis #2
  ]; auto
}.

Theorem minus-one-test : [=(ap(minus-one; succ(succ(zero))); succ(zero); nat)] {
  unfold <minus-one>; reduce; auto
}.

Operator plus : (0;0).
[plus(M; N)] =def= [natrec(M; N; _.n.succ(n))].

Tactic t {
  unfold <plus>; auto 0; elim #1; reduce; auto 0.
}.

Theorem plus-id-left : [isect(nat; n. =(plus(zero; n); n; nat))] {
  refine <t>
}.

Theorem plus-id-right : [isect(nat; n. =(plus(n; zero); n; nat))] {
  refine <t>
}.

Theorem succ-right : [
  isect(nat; n. isect(nat; m. =(plus(n; succ(m)); succ(plus(n; m)); nat)))
] {
  refine <t>
}.

Theorem plus-commutes : [
  isect(nat; n.isect(nat; m. =(plus(n; m); plus(m; n); nat)))
] {
  ||| Kick off the induction and do the boring computation thingies.
  refine <t>;

  ||| The base case immeidately follows from plus-id-right
  focus 0 #{
    cut-lemma <plus-id-right>;
    elim #3 [m]; auto; unfold <plus>;
    hyp-subst → #4 [h.=(m;h;nat)];
    auto
  };

  ||| In order to prove this we first rewrite by succ-right from which our
  ||| result follows from reflexivity.
  cut-lemma <succ-right>;
  elim #5 [m]; auto; elim #6 [n']; unfold <plus>; auto;
  hyp-subst → #8 [h.=(succ(natrec(n'; m; _.n.succ(n))); h; nat)];
  auto; eq-cd; auto

}.
