Infix 2 "∈" := member.
Postfix 10 "⇓" := has-value.

Theorem natp-example : [nat] {
  witness [succ(zero)]; auto
}.

Theorem minus-one : [nat -> nat] {
  intro <n>; aux {auto};
  elim #1;
  [ witness [zero]
  , hypothesis #2
  ]; auto
}.

Theorem minus-one-test : [=(minus-one succ(succ(zero)); succ(zero); nat)] {
  unfold <minus-one>; reduce; auto
}.

Operator add : (0;0).
Infix -> 100 "N+" := add.
[M N+ N] =def= [natrec(M; N; _.n.succ(n))].

Theorem add-id-left : [{n:nat} =(zero N+ n; n; nat)] {
  auto; unfold <add>; reduce; auto
}.

Theorem add-id-right : [{n:nat} =(n N+ zero; n; nat)] {
  auto; unfold <add>; elim #1; reduce; auto
}.

Theorem succ-right : [
  {n:nat} {m:nat} =(n N+ succ(m); succ(n N+ m); nat)
] {
  auto; unfold <add>; elim #1; reduce; auto
}.

Theorem add-commutes : [
  {n:nat} {m:nat} =(n N+ m; m N+ n; nat)
] {
  ||| Kick off the induction and do the boring computation thingies.
  auto; unfold <add>; elim #1; reduce; auto;

  ||| The base case immediately follows from add-id-right
  focus 0 #{
    cut-lemma <add-id-right>; unfold <add>;
    symmetry;
    bhyp <add-id-right>; auto
  };

  ||| In order to prove this we first rewrite by succ-right from which our
  ||| result follows from reflexivity.
  cut-lemma <succ-right>; elim <succ-right> [m]; auto;
  unfold <add>; elim #6 [n']; auto;
  hyp-subst → #8 [h.=(_; h; _)]; auto
}.

Theorem has-value-wf : [{M:base} M ⇓ ∈ U{i}] {
  unfold <has-value>; auto
}.

Resource wf += { wf-lemma <has-value-wf> }.

Operator pred : (0).
[pred(n)] =def= [natrec(n; bot; m._.m)].

Operator minus : (0;0).
[minus(m; n)] =def= [
  natrec(n; m; n'.ih. pred(ih))
].

Operator leq : (0;0).
Infix 10 "≤" := leq.
[m ≤ n] =def= [minus(n; m) ⇓].

Theorem leq-wf : [{m:nat} {n:nat} (m ≤ n) ∈ U{i}] {
  unfold <leq>; auto
}.

Resource wf += { wf-lemma <leq-wf> }.

Operator upto : (0).
[upto(i)] =def= [{j : nat | j ≤ i}].

Theorem upto-wf : [{n:nat} upto(n) ∈ U{i}] {
  unfold <upto>; auto
}.

Resource wf += { wf-lemma <upto-wf> }.
