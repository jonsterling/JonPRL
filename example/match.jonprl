Theorem match_example : [{A : U{i}} {B : U{i}} A -> B -> A] {
  intro; [intro, auto]; [intro, auto]; [intro, auto]; [id, auto];
  @{[H : A |- A] => witness [H]; auto}
}.

Theorem match_example2 : [(A : U{i})(x : A)  A] {
  intro; [intro, auto]; [assert [member(x; A)], auto]; [auto, id];

  (* The 's here at the start of A assert that we want to bind it
   * to something in the context vs generate a lexically scoped name.
   * It's like the opposite of Coq's ? mechanism.
   *)
  @{[H : member(X; 'A) |- 'A] => witness [X]; assumption}
}.

Theorem modus_ponens : [{A : U{i}}{B : U{i}}((B -> A) * B) -> A] {
  auto;
  *{
    @{ [H' : A, H : A -> B |- B] => elim #4 [H']; auto
     | [H : A * B |- C] => elim #3
     }
   }
}.
