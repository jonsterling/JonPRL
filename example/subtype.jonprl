Theorem reflexive : [{A : U{i}} subtype(A; A)] {
  auto
}.

Theorem trans : [{A : U{i}}{B : U{i}}{C : U{i}}
                 subtype(A; B) => subtype(B; C) => subtype(A; C)] {
  auto; elim #4 [=(x''; x''; A)];
  auto; elim #5 [=(x''; x''; B)];
  auto
}.

Theorem very-strong-function : [{A : U{i}}{B : U{i}}{C : U{i}}
                                subtype(A; B) -> (A -> B)] {
  auto; elim #4 [=(x'; x'; A)]; auto; witness [x']; unfold <member>; auto
}.

Theorem fun-is-id : [{A : U{i}}{B : U{i}}{x : subtype(A; B)}{a : A}
                     ceq(very-strong-function x a; a)] {
  auto; unfold <very-strong-function>; *{step}; auto
}.


Tactic unsquash {
  @{ [ |- squash(T) ] =>
       assert [T] <h>;
       [ id
       , witness [lam(_.<>) h];
         unfold <squash>;
         auto;
         fail
       ]
   }
}.

(* I tried to call sub_type, "subtype_rel" as in Nuprl but got syntax errors *)

Theorem subtype_rel_wf :
[ {A : U{i}}{B : U{i}} member(sub_type(A;B);U{i}) ] {
  auto;unfold <sub_type member>;eq-eq-base;unfold <bunion id>;
  [ auto
  , csubst [ceq(lam(x.x);lam(x.snd(x)) pair(inr(<>);lam(x.x)))] [h.=(h;h;_)];
    [unfold <snd>; reduce 2; auto, id];eq-cd;auto;[reduce 1;auto, id];
    elim <x>;[reduce 1;auto, reduce 1; auto]
  , csubst [ceq(lam(x.x);lam(x.snd(x)) pair(inr(<>);lam(x.x)))] [h.=(h;h;_)];
    [unfold <snd>; reduce 2; auto, id];eq-cd;auto;[reduce 1;auto, id];
    elim <x>;[reduce 1;auto, reduce 1; auto]
  ]
}.

Theorem subtype_rel_eq :
[ {A : U{i}}{B : U{i}}{x : A}{y : A} sub_type(A;B) -> =(x;y;A) -> =(x;y;B) ] {
 auto;
 [ unfold <sub_type id>;
   assert [=(lam(x.x)x;lam(x.x)y;B)] <h>;
   [ eq-cd [A -> B];[unfold <member>;auto, auto]
   , reduce;auto
   ]
 , cut-lemma <subtype_rel_wf>;
   elim #5 [A];[auto,id];
   elim #6 [B];[auto,id];
   unfold <member>;auto
 ]
}.

Theorem subtype_rel_reflexive : [{A : U{i}} sub_type(A; A)] {
  auto;unfold <id>;eq-cd;auto
}.

Theorem subtype_rel_trans : [{A : U{i}}{B : U{i}}{C : U{i}}
                 sub_type(A; B) => sub_type(B; C) => sub_type(A; C)] {
  auto;
  [ unfold <id>;eq-cd;[id,auto];
    cut-lemma <subtype_rel_eq>;
    elim #7 [A];[auto,id];
    elim #8 [B];[auto,id];
    elim #10 [_];[auto,id];
    elim #12 [_];[auto,id];
    elim #14 [x];[auto;unfold <sub_type member id>;auto,id];
    elim #16 [<>];[auto,id];
    elim #7 [B];[auto,id]; (* here it looks like B is captured in 20*)
    elim #20 [C];[auto,id];
    elim #22 [_];[auto,id];
    elim #24 [_];[auto,id];
    elim #26 [x'];[auto;unfold <sub_type member id>;auto,id];
    elim #28 [y'''''];auto
  , cut-lemma <subtype_rel_wf>;
    elim #5 [B];[auto,id];
    elim #6 [C];[auto,id];
    unfold <member>;auto
  , cut-lemma <subtype_rel_wf>;
    elim #4 [A];[auto,id];
    elim #5 [B];[auto,id];
    unfold <member>;auto
  ]
}.

