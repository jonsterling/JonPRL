||| This is a proof that U{i} : U{i} is a contradiction in JonPRL.
||| Proving this follows the reasoning from Russell's paradox: we
||| construct a type which contains all types that don't contain themselves
||| and show that *it* both is and isn't a member.
|||
||| The well-formedness conditions in this proof are absolutely
||| killer and lead to most of the bloat in the proofs.

Infix 20 "∈" := member.
Infix 40 "~" := ceq.
Infix 60 "∪" := bunion.
Prefix 40 "¬" := not.

Operator Russell : ().
[Russell] =def= [{x : U{i} | ¬ (x ∈ x)}].

Tactic break-plus {
  @{ [x : _ + _ |- _] => elim <x> }
}.

Tactic bunion-eq-right {
  @{ [|- =(M; N; L ∪ R)] =>
       csubst [M ~ lam(x. snd(x)) <inr(<>), M>] [h.=(h;_;_)];
       aux { unfold <snd>; reduce; auto };
       csubst [N ~ lam(x. snd(x)) <inr(<>), N>] [h.=(_;h;_)];
       aux { unfold <snd>; reduce; auto };
  }
}.

Tactic eq-base-tac {
  @{ [|- =(=(M; N; A); =(M'; N'; A'); _)] =>
       eq-eq-base; auto;
       bunion-eq-right; unfold <bunion>
   }
}.

Tactic impredicativity-wf-tac {
  unfold <member>; eq-base-tac;
  eq-cd; ?{@{[|- =(_; _; base)] => auto}};
  eq-cd @i'; ?{break-plus}; reduce; auto
}.

Tactic contradiction {
  unfold <not implies>;
  @{ [H : P -> void, H' : P |- void] =>
       elim <H> [H'];
       unfold <member>;
       auto
   }
}.

Theorem u-in-u-wf : [(U{i} ∈ U{i}) ∈ U{i'}] {
  impredicativity-wf-tac
}.

Theorem type-not-in-type : [¬ (U{i} ∈ U{i})] {
  unfold <not implies>; intro;

  aux {lemma <u-in-u-wf>};

  ||| This can't really be a separate theorem since
  ||| the well-formedness of Russells' set depends on
  ||| U ∈ U
  assert [Russell ∈ U{i}] <russell-wf>;
  aux {
    unfold <member Russell>; eq-cd; ?{assumption};
    unfold <not implies>; eq-cd; auto;
    impredicativity-wf-tac;
  };


  assert [(Russell ∈ Russell) ∈ U{i}] <russell-in-russell-wf>;
  aux { impredicativity-wf-tac; cum @i; auto };

  ||| We can now start the proof.
  assert [¬ (Russell ∈ Russell)] <russell-not-in-russell>;
  aux {
    unfold <not implies>;
    intro @i; aux {assumption};

    assert [(R : Russell) * R ~ Russell];
    aux {
      intro [Russell] @i; auto
    };

    elim #5;
    unfold <Russell>; elim #6;
    assert [¬ ({x:U{i} | ¬ (x ∈ x)} ∈ {x:U{i} | ¬ (x ∈ x)})];
    aux {
      chyp-subst ← #9 [h. ¬ (h ∈ h)];
      unfold <not implies>;
      intro; aux { impredicativity-wf-tac };
    };

    contradiction
  };

  assert [Russell ∈ Russell];
  aux {
    unfold <member Russell>; eq-cd;
    unfold <member>;

    ||| We've already done all the hard work of proving this
    main {assumption};

    unfold <not implies>; eq-cd; ?{!{auto}};
    impredicativity-wf-tac;
  };

  contradiction
}.
