Infix 20 "∈" := member.
Infix 100 "~" := ceq.

Operator pi2 : ().
[pi2] =def= [lam(x. spread(x; u.v.v))].

Operator union : (0;1).
[union(A; x.B[x])] =def= [image((x : A) * B[x]; pi2)].

Theorem union-wf : [
  {A : U{i}} {B : A -> U{i}} union(A; x.B x) ∈ U{i}
] {
  unfold <union pi2>; auto
}.

||| The least fixed point of a functor can be taken using the union type. This
||| is dual to the construction of the greatest fixed point using intersection and
||| top. Intuitively, the index [n] says how big the structure is, whereas in
||| the coinductive case it specified how much of the structure is requested for
||| consumption.
Operator rec : (1).
[rec(x.F[x])] =def= [union(nat; n. natrec(n; void; _.x. F[x]))].

||| We construct the natural numbers as the least fixed point of the functor 1 + X.
Operator NAT : ().
[NAT] =def= [rec(X. unit + X)].

Operator ZE : ().
[ZE] =def= [inl(<>)].

Operator SU : (0).
[SU(N)] =def= [inr(N)].

Theorem NAT-wf : [NAT ∈ U{i}] {
  unfold <NAT rec union unit>; auto
}.

Theorem ZE-wf : [ZE ∈ NAT] {
  ||| In order to apply the image membership rule, we must wrangle the goal such
  ||| that ZE is in the right form (i.e. a function application); the part that is
  ||| lost in the redex is, then, the depth of the structure of ZE.
  assert [ZE ~ (pi2 <succ(zero), ZE>)] <H>;
  focus 0 #{
    unfold <ZE pi2>; reduce; auto;
  };

  chyp-subst -> <H> [h. h ∈ NAT]; thin <H>;
  unfold <NAT ZE rec union unit>; auto;
  reduce; auto
}.


Tactic isect-NAT {
  @{ [|- {n:NAT} _] => intro @i; focus 1 #{ lemma <NAT-wf> }}
}.

Tactic NAT-induction {
  @{ [n:NAT |- _] =>
     unfold <NAT rec union>; elim <n> <w>; elim <w> <s,t>; elim <s>
  }
}.

||| For any term ZE or SUⁿ(ZE), we may convert it back to a canonical (built-in)
||| natural number.
Operator nat-of : (0).
[nat-of(N)] =def= [fix(lam(F.decide(N; l.zero; r.succ(F r))))].

Theorem nat-of-wf : [{n:NAT} nat-of(n) ∈ nat] {
  isect-NAT; NAT-induction;
  unfold <pi2>; reduce; auto
}.

Theorem SU-wf : [{n:NAT} SU(n) ∈ NAT] {
  isect-NAT;

  ||| We use the same technique here as we did to prove the wellformedness of ZE.
  assert [SU(n) ~ (pi2 <succ(nat-of(n)), SU(n)>)] <H>;
  focus 0 #{
    unfold <SU nat-of pi2>; csymmetry; *{ step }; auto
  };

  chyp-subst -> <H> [h.h ∈ NAT];
  NAT-induction;
  unfold <pi2>; reduce; auto
}.

Theorem NAT-ind-wf : [
  lam(pz. lam(psu. lam(n. fix(lam(F. decide(n; l.pz; r.psu r (F r))))))) ∈ {P : NAT -> U{i}} P ZE -> ((n : NAT) P n -> P (SU(n))) -> (z : NAT) P z
] {
  auto; eq-cd @i';
  focus 1 #{
    auto; cut-lemma <NAT-wf>; cum @i; unfold <member>; auto
  }; auto;

  focus 1 #{
    cut-lemma <ZE-wf>; unfold <member>; auto
  }; eq-cd @i;

  focus 1 #{
    auto; [cut-lemma <NAT-wf>; unfold <member>; auto, cut-lemma <SU-wf>];
    unfold <member>; bhyp <SU-wf>; auto
  }; eq-cd @i;

  focus 1 #{
    lemma <NAT-wf>
  };

  elim #3 [z]; auto;
  NAT-induction; unfold <pi2>;
  focus 0 #{reduce 1; auto};
  unfold <SU>;
  ||| TODO: can someone figure out how to finish this proof?
}.
