Operator is-bar : (0;0;0).
[is-bar(F; S; Q)] =def= [
  {α:spread-extension(F; S)} {u : approximations(F; α) | Q u}
].

Theorem is-bar-wf : [{F:container{i}} {S:spreiding(F)} {Q:neigh(F) -> U{i}} is-bar(F; S; Q) ∈ U{i}] {
  auto; intro @i'; auto;
  unfold <neighborhoods>; reduce; auto;
  unfold <is-bar>; auto;
  unfold <spread-extension approximations neighborhoods>; reduce; auto
}.

Resource wf += { wf-lemma <is-bar-wf> }.

Operator is-hereditary : (0;0;0).
[is-hereditary(F; S; Q)] =def= [
  (u:neigh(F)) (e:refinement(F; u) -> dom(F)) Q (u ^ r. e r) -> Q u
].

Theorem is-hereditary-wf : [{F:container{i}} {S:spreiding(F)} {Q:neigh(F) -> U{i}} is-hereditary(F; S; Q) ∈ U{i}] {
  auto; intro @i'; auto;
  unfold <neighborhoods>; reduce; auto;
  unfold <is-hereditary>; auto;
  unfold <neighborhoods>; reduce; auto;
  focus 0 #{ elim #4; reduce; auto };
  elim #1; reduce; auto
}.

Resource wf += { wf-lemma <is-hereditary-wf> }.

||| The statement of the Bar Induction Principle (variant that requires decidability of the bar)
Operator BI-D : (0;0;0;0).
[BI-D(F; S; Q; A)] =def= [
  (((u:{u:neigh(F) | S u}) decidable(Q u)) * is-bar(F; S; Q) * is-hereditary(F; S; A) * ((u:neigh(F)) Q u -> A u))
    -> A []
].

Theorem BI-D-wf : [{F:container{i}} {S:spreiding(F)} {Q:neigh(F) -> U{i}} {A:neigh(F) -> U{i}} BI-D(F; S; Q; A) ∈ U{i}] {
  auto; intro @i'; auto;
  unfold <BI-D>; auto;
  unfold <spreiding>;
  unfold <neighborhoods>; reduce; auto;
  eq-cd [neigh(F) -> U{i}]; auto
}.

Resource wf += { wf-lemma <BI-D-wf> }.

