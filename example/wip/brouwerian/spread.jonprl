Operator spw-decidable : (0;0).
[spw-decidable(F; S)] =def= [(u:neigh(F)) decidable(S u)].

Operator spw-leaks-upwards : (0;0).
[spw-leaks-upwards(F; S)] =def= [(u:neigh(F)) S u -> (e:proj(F ♮; u) -> dom(F)) * S (u ^ r. e r)].

Operator spw-downward-closed : (0;0).
[spw-downward-closed(F; S)] =def= [(v:neigh(F)) (u:{u : neigh(F) | u ≼ v}) S u -> S v].

Theorem spw-decidable-wf : [{F:container{i}} {S:neigh(F) -> U{i}} spw-decidable(F; S) ∈ U{i}] {
  unfold <spw-decidable neighborhoods>; reduce; auto;
  elim #1; auto
}.

Theorem spw-leaks-upwards-wf : [{F:container{i}} {S:neigh(F) -> U{i}} spw-leaks-upwards(F; S) ∈ U{i}] {
  unfold <spw-leaks-upwards neighborhoods>; reduce; auto;
  elim #1; auto; reduce; auto;
  elim #5; reduce; auto
}.

Theorem spw-downward-closed-wf : [{F:container{i}} {S:neigh(F) -> U{i}} spw-downward-closed(F; S) ∈ U{i}] {
  auto; unfold <spw-downward-closed neighborhoods>; reduce; auto;
  cut-lemma <prefixes-wf>;
  elim #5 [F]; auto;
  unfold <member neighborhoods>; reduce;
  bhyp #6; auto;
}.

Resource wf += { wf-lemma <spw-decidable-wf> }.
Resource wf += { wf-lemma <spw-leaks-upwards-wf> }.
Resource wf += { wf-lemma <spw-downward-closed-wf> }.

||| I can't use the word "spread" (because that's the name of the recursor for
||| pairs), so I'll use the Dutch.

Operator spreidingswet : (0;0).
[spreidingswet(F; S)] =def= [
  spw-decidable(F; S)
    * spw-leaks-upwards(F; S)
    * spw-downward-closed(F; S)
    * S []
].

Theorem spreidingswet-wf : [{F:container{i}} {S:neigh(F) -> U{i}} spreidingswet(F;S) ∈ U{i}] {
  intro @i'; aux { auto };
  intro @i'; aux { elim #1; auto };
  auto; *{ unfold <spreidingswet neighborhoods>; reduce; auto }
}.

Resource wf += { wf-lemma <spreidingswet-wf> }.

Operator spreiding : (0).
[spreiding(F)] =def= [{S:neigh(F) -> U{i} | spreidingswet(F; S)}].

Theorem spreiding-wf : [{F:container{i}} spreiding(F) ∈ U{i'}] {
  auto; unfold <spreiding neighborhoods>; reduce; auto;
  cum @i; auto; unfold <neighborhoods>; reduce; auto
}.

Resource wf += { wf-lemma <spreiding-wf> }.

Operator universal-spread : ().
[universal-spread] =def= [lam(_.unit)].

Theorem universal-spread-pre-wf : [{F:container{i}} universal-spread ∈ neigh(F) -> U{i}] {
  auto; unfold <universal-spread neighborhoods>; auto;
  elim #1; reduce; auto
}.

Resource wf += { wf-lemma <universal-spread-pre-wf> }.

Theorem universal-spread-wf : [{F:container{i}} (s:dom(F)) universal-spread ∈ spreiding(F)] {
  unfold <spreiding>; auto; aux { elim #1; reduce; auto };
  eq-cd @i; ?{ !{ auto } };
  unfold <spreidingswet>; auto;
  unfold <neighborhoods>; reduce; auto;
  unfold <universal-spread>; reduce; auto;
  aux { elim #3; reduce; auto; elim #1; reduce; auto };
  focus 0 #{ intro #0; auto };
  intro @i; auto;
  cut-lemma <prefixes-wf>;
  elim #5 [F]; auto;
  unfold <neighborhoods member>; reduce;
  bhyp #6; auto
}.

Resource wf += { wf-lemma <universal-spread-wf> }.

||| The extension of a spread as a collection of ideal points (i.e. choice-sequences).
Operator spread-extension : (0;0).
[spread-extension(F; S)] =def= [{α:choice-sequence(F) | (u:approximations(F; α)) S u}].

Theorem spread-extension-wf : [{F:container{i}} {S : spreiding(F)} spread-extension(F; S) ∈ U{i}] {
  auto; intro @i'; auto;
  unfold <spread-extension>; auto;
  unfold <spreiding>;
  elim #2; unfold <approximations neighborhoods>; reduce; auto
}.

Resource wf += { wf-lemma <spread-extension-wf> }.
