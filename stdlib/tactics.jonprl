Tactic squash-intro {
  @{
    [|- squash(A)] =>
       assert [A];
       focus 1 #{
         @{
           [H : A |- _] =>
             unfold <squash member>; witness [lam(_.<>) H]; auto
         }
       }
  }
}.

Resource intro += {squash-intro}.

Tactic contradiction {
  @{ [H:P, H':not(P) |- _] => unfold <not implies>; elim <H'> [H]; auto
   | [H:P, H':P -> void |- _] => elim <H'> [H]; auto
   | [H:P, H':P => void |- _] => elim <H'> [H]; auto
   }
}.

|||
Tactic bunion-eq-right {
  @{ [|- =(M; N; bunion(L; R))] =>
       csubst [ceq(M; lam(x. snd(x)) <inr(<>), M>)] [h.=(h;_;_)];
       aux { unfold <snd>; reduce; auto };
       csubst [ceq(N; lam(x. snd(x)) <inr(<>), N>)] [h.=(_;h;_)];
       aux { unfold <snd>; reduce; auto };

       unfold <bunion>; eq-cd; auto; reduce;
       aux {
         @{[H : unit + unit |- _] => elim <H>; thin <H>};
         reduce; auto
       }
  }
}.

Tactic bunion-eq-left {
  @{ [|- =(M; N; bunion(L; R))] =>
       csubst [ceq(M; lam(x. snd(x)) <inl(<>), M>)] [h.=(h;_;_)];
       aux { unfold <snd>; reduce; auto };
       csubst [ceq(N; lam(x. snd(x)) <inl(<>), N>)] [h.=(_;h;_)];
       aux { unfold <snd>; reduce; auto };

       unfold <bunion>; eq-cd; auto; reduce;
       aux {
         @{[H : unit + unit |- _] => elim <H>; thin <H>};
         reduce; auto
       }
  }
}.


Tactic eq-base-tac {
  @{ [|- =(=(_; _; _); =(_; _; _); _)] =>
       eq-eq-base; ?{ !{ bunion-eq-right; auto } }
   | [|- =(_ * _; _ * _; _)] => eq-cd
   | [|- =(_ => _; _ => _; _)] => eq-cd
   | [|- =(_ -> _; _ -> _; _)] => eq-cd
   | [|- member(_; _)] => unfold <member>
   }
}.

Tactic destruct-prods {
  *{ @{ [H:_*_ |- _] => elim <H>; thin <H>
      }
   }
}.

Tactic hyp-trans {
  @{ [H : P, H' : P => Q, H'' : Q => R |- R] =>
       assert [Q] <z>;
       aux {
         elim <H'> [H]; auto
       };
       main {
         elim <H''> [z];
         auto
       }
   | [H : P, H' : P => Q |- Q] =>
       elim <H'> [H]; auto
   }
}.
